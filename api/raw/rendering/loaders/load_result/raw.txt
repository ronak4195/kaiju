package load_result // import "."


TYPES

type AnimBone struct {
	NodeIndex     int
	PathType      AnimationPathType
	Interpolation AnimationInterpolation
	// Could be Vec3 or Quaternion, doing this because Go doesn't have a union
	Data [4]matrix.Float
}

type AnimKeyFrame struct {
	Bones []AnimBone
	Time  float32
}

type Animation struct {
	Name   string
	Frames []AnimKeyFrame
}

type AnimationInterpolation = int

const (
	AnimInterpolateInvalid AnimationInterpolation = iota - 1
	AnimInterpolateLinear
	AnimInterpolateStep
	AnimInterpolateCubicSpline
)
type AnimationPathType = int

const (
	AnimPathInvalid AnimationPathType = iota - 1
	AnimPathTranslation
	AnimPathRotation
	AnimPathScale
	AnimPathWeights
)
type Joint struct {
	Id   int32
	Skin matrix.Mat4
}

type Mesh struct {
	Name     string
	MeshName string
	Verts    []rendering.Vertex
	Indexes  []uint32
}

func (m *Mesh) GenerateBVH(t *matrix.Transform) *collision.BVH

func (mesh *Mesh) ScaledRadius(scale matrix.Vec3) matrix.Float

type Node struct {
	Name      string
	Parent    int
	Transform matrix.Transform
}

type Result struct {
	Nodes      []Node
	Meshes     []Mesh
	Textures   []string
	Animations []Animation
	Joints     []Joint
}

func NewResult() Result

func (r *Result) Add(name, meshName string, verts []rendering.Vertex,
	indexes []uint32, textures []string)

func (r *Result) IsValid() bool

